#include <stdlib.h>
#include <stdio.h>
#include <iostream>
using namespace std;
#include "cl_parrent.h"
#include "cl_derivative.h"

int main() {
	int iPrivat, iPublic;
	cin >> iPrivat >> iPublic; // 1. Ввод значения двух целочисленных переменных.
	cl_derivative object(iPrivat, iPublic); // 2. Создать объект производного класса используя целочисленных переменных в конструкторе в качестве аргументов в последовательности, как им были присвоены значения. Первый аргумент содержит значение для свойства закрытого раздела/,/ второй для свойства открытого раздела.
	object.cl_parent::print(); // 3. Вывод значений свойств родительского объекта
	cout << endl;
	object.print(); // 4. Вывод значений свойств производного объекта
	if (iPrivat > 0) { // 5. Если исходное значение закрытого свойства больше нуля, то:
		object.change(iPrivat + 1, iPublic + 1); // 5.1. Переопределить значения свойств производного объекта, увеличив на единицу введенные исходные значения.
    object.cl_parent::change(iPrivat - 1, iPublic - 1); // 5.2. Переопределить значения свойств родительского объекта, уменьшив на единицу введенные исходные значения.
		cout << endl;
		object.print(); // 5.3. Вывод значений свойств производного объекта.
		cout << endl;
		object.cl_parent::print(); // 5.4. Вывод значений свойств родительского объекта.
		return(0);
	}
	else { // 6. Иначе:
		object.cl_parent::change(iPrivat + 1, iPublic + 1); // 6.1. Переопределить значения свойств родительского объекта, увеличив на единицу введенные исходные значения.
		object.change(iPrivat - 1, iPublic - 1); // 6.2. Переопределить значения свойств производного объекта, уменьшив на единицу введенные исходные значения.
		cout << endl;
		object.cl_parent::print(); // 6.3. Вывод значений свойств родительского объекта.
		cout << endl;
		object.print(); // 6.4. Вывод значений свойств производного объекта.
		return(0);
	}
}
